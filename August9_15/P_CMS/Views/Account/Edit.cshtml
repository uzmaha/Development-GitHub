@model P_CMS.Models.EditViewModel
<style>
    #addRole {
        margin-left: 4px;
    }

    .chkProduct {
        margin-right: 6px !important;
    }

    #addRole {
        margin-left: 4px;
    }

    .dvManagerProducts {
        padding-top: 6px !important;
    }
</style>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Edit User Account</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.selectedProduct, htmlAttributes: new { @id = "selectedProduct" })
        @Html.HiddenFor(model => model.RoleName)
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RoleId", null, "Select Role", htmlAttributes: new { @class = "form-control col-md-6" })
                <button type="button" id="addRole" class="btn col-md-1 active btn-default" data-toggle="modal" data-target="#myModal">New Role</button>
                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.Products != null && Model.Products.Count() > 0)
        {
            <div id="dvManagerProducts" class="form-group">
                <label class="control-label col-md-2">Assign Products</label>
                <div class="col-md-10 dvManagerProducts">
                    @foreach (var item in Model.Products)
                    {
                        <label><input type="checkbox" class="chkProduct" id="@item.ProductId" />@item.ProductName</label><br />
                    }
                </div>
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" id="btnEditUser" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back", "Index", "User")
</div>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Create Role</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <div class="col-md-3">
                        <label>Enter Role</label>
                    </div>
                    <div class="col-md-5">
                        <input type="text" name="Role" id="role" value=" " />
                        <label id="lblMessage"></label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="addNewRole">Save</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        var productIdArray = [];
        var productArray = [];
        $(document).ready(function () {
            var selectedUser = $.trim($("#RoleId :selected").text());
            var selectedProducts = $('#selectedProduct').val();
            if (selectedProducts != '') {
                productIdArray = selectedProducts.split(",");
                if (productIdArray.length > 0) {
                    $.each(productIdArray, function (index, value) {
                        productArray.push(value);
                    });
                    UncheckAllProducts();
                    checkSelecetedProducts(productArray);
                }
            }

            if (selectedUser != "Manager") {
                $("#dvManagerProducts").slideUp();
            }

            $('#btnEditUser').click(function () {
                productArray = [];
                //alert($.trim($("#RoleId :selected").text().toLowerCase()));
                if ($.trim($("#RoleId :selected").text().toLowerCase() == "manager")) {
                    productArray = $("input[type='checkbox'][class='chkProduct']:checked").map(function () {
                        return this.id;
                    }).get();
                } 
                $('#selectedProduct').val(productArray);            
            });

            $('#RoleId').change(function (e) {
                var selectedRoleId = $(this).val();
                var selectedRoleName = $.trim($("#RoleId :selected").text());
                if (selectedRoleName.toLowerCase() == "manager") {
                    if ($('#dvManagerProducts').is(":hidden")) {
                        $("#dvManagerProducts").slideDown();
                        UncheckAllProducts();
                        checkSelecetedProducts(productIdArray);
                    }
                } else {
                   
                    if (!$('#dvManagerProducts').is(":hidden")) {
                        $("#dvManagerProducts").slideUp();
                    }
                  
                    UncheckAllProducts();
                }
            });
            $('#Password').removeAttr('type');
            $('#lblMessage').val('');
            $('#addNewRole').click(function () {
                var new_role = $('#role').val();
                var role = JSON.stringify({ role: new_role });
                $.ajax({
                    url: '/User/AddRole',
                    type: 'POST',
                    data: role,
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        if (response) {
                            $('#lblMessage').val('');
                            $('#role').val('');
                            $('#myModal').modal('toggle');
                            document.location.reload();
                        }
                    }
                   , error: function () {
                       $('#lblMessage').val('Role not added');
                   }
                });
            });
        });

        function UncheckAllProducts() {
            $("input[class='chkProduct']:checked").each(function () {
                var parentTAG = $(this).closest('label');
                var tdHTML = $(this).parent().clone();
                tdHTML = tdHTML.html().replace('checked="checked"', '');
                parentTAG.html(tdHTML);
                $(this).html().replace('checked="checked"', '');
            });
        }

        function checkSelecetedProducts(selectedProductArray) {
            $("input[class='chkProduct']").each(function () {
                var currentCheckboxId = $(this).attr('id');
                if ($.inArray(currentCheckboxId, selectedProductArray) > -1) {
                    $(this).attr("checked", 'checked');
                }
            });
        }
    </script>}