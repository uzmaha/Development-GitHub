@model P_CMS.Models.AssignedTasks
<style>
    .lblChangeProducts {padding-top:0px !important;
    }
    .dvFields {
         margin-bottom: 0px !important;
    }
    .chkBox {
        margin-top: 7px !important;
    }
    .reassignedText {
        color: green !important;
    }
        .reassignedText > hr {
            border-color: green !important;
        }
    .closedText > hr {
        border-color: red !important;
    }
    .closedText {
        color: red !important;
    }
    hr {
        margin-top: 0px;
    }
    .newLine {
        border-color: #b7b7b7;
        margin-bottom: 5px;
        margin-top: 0px;
    }
    .BoldText {
        font-size: 15px;
    }
        .BoldText > div {
            background-color: yellow;
        }
    .txtDescription {
        background-color: #fff;
        border-style: ridge;
        font-size: 13px;
        font-weight: normal;
        height: 280px;
        overflow-x: hidden;
        overflow-y: scroll;
        padding: 3px;
        resize: none;
        border: 1px solid #b6b6b6;
        border-radius: 4px;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.15);
        display: block;
    }
    #fu-my-auto-upload {
        box-shadow: none;
        margin-bottom: 7px;
        width: 284px;
        border: 1px solid #cccccc;
    }
    .dvUploadedFiles {
        border: 1px solid #cccccc;
        border-radius: 4px;
        box-shadow: 0 0 3px rgba(0, 0, 0, 0.15);
        font-size: 15px;
        margin-left: 16px;
        width: 279px;
        padding-top: 2px;
    }
</style>
@{
    var uploadedFiles = ViewData["UploadedFiles"] == null ? null : (List<P_CMS.Models.FilesUploaded>)ViewData["UploadedFiles"];
    string hide = uploadedFiles == null ? "hidden" : "";
    string taskTag = Model.TaskTag;
    string task = Model.IssueCode;
    Layout = "~/Views/Shared/_Layout.cshtml";
    string taskStatus = Model.statusType;
    string desc = Model == null ? "" : Model.PrevDescription;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="row">
            <h2 class="col-md-6">Assign Task</h2>
            <div class="col-md-6" id="defaultCountdown"></div>
        </div>
        <hr />
        @Html.ValidationSummary("", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UpdatedOn, htmlAttributes: new { @id = "ddCreatedOn" })
        @Html.HiddenFor(model => model.UploadedFileName, htmlAttributes: new { @id = "UploadedFileName" })
        @Html.HiddenFor(model => model.IssueId)
        <div class="form-group dvFields">
            @Html.LabelFor(model => model.IssueCode, "Task Code", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <h5>@task</h5>
            </div>
        </div>
        <div class="form-group dvFields">
            @Html.LabelFor(model => model.Tag.TagValue, "Tag", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <h5>@taskTag</h5>
            </div>
        </div>
        <div class="form-group dvFields">
            @Html.LabelFor(model => model.statusType, "Status", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <h5>@taskStatus</h5>
            </div>
        </div>
        <div class="form-group dvFields">
            @Html.LabelFor(model => model.AssignedTo, "Assigned To", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <h5>@Model.AssignedTo</h5>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.userid, "Select Engineer", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("userid", null, "Select Engineer", htmlAttributes: new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <label class="lblChangeProducts control-label col-md-2">Allow to change products</label>
            <div class="col-md-10">
                <input type="checkbox" name="chkChangeProduct" id="chkChangeProduct" checked="checked" />
            </div>
        </div>
        <div class="form-group ">
            @Html.LabelFor(model => model.ProductId, "Select Category", htmlAttributes: new { @class = "control-label col-md-2 " })
            <div class="col-md-10">
                @Html.DropDownList("ProductId", null, "Select Category", htmlAttributes: new { @class = "form-control ddlProducts" })
            </div>
        </div>
        <div class="form-group ">
            @Html.LabelFor(model => model.ProductId, "Select L.O.B", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProductId", null, "Select Category", htmlAttributes: new { @class = "form-control ddlProducts" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2"> Attach Files</label>
            <div class="col-md-10">
                <input type="file" name="FileToUpload" id="fu-my-auto-upload" class="btn active" />
            </div>
            <label class="control-label col-md-2"> </label>
            <div class="dvUploadedFiles  col-md-3 @hide">
                @if (uploadedFiles != null)
                {
                    foreach (var item in uploadedFiles)
                    {
                        string fileLink = item.dbFileName;
                        <a href='#' link="@fileLink" class="aDownloadFile" target="_Parent">@item.name</a>
                        <br />
                    }
                }
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Previous Comments", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="txtDescription form-control"> @Html.Raw(WebUtility.HtmlDecode(desc))</label>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @id = "Description", @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" id="btnSave" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back", "Index", new { id = Model.IssueId, statusId = Model.StatusId })
</div>
@section Scripts {
    <link href="~/Content/CountDown/jquery.countdown.css" rel="stylesheet" />
    <script src="~/Content/CountDown/jquery.plugin.js"></script>
    <script src="~/Content/CountDown/jquery.countdown.js"></script>
    <script src="~/Content/FileUpload/jquery-ui-1.9.2.min.js"></script>
    <script src="~/Content/ckeditor/ckeditor.js"></script>
    <script src="~/Content/ckeditor/adapters/jquery.js"></script>
    <script src="~/Content/FileUpload/jquery.fileupload.js"></script>
    <script src="~/Content/FileUpload/jquery.fileupload-ui.js"></script>
    <script src="~/Content/FileUpload/jquery.iframe-transport.js"></script>
    <script>
        var uploadedFiles = [];
        var selected_client = 0;
        $(document).ready(function () {
            displayTimer($('#ddCreatedOn').val());
            initAutoFileUpload();
            var num = 0;
            chkEditddlProducts();
            $(document.body).on('change', '#chkChangeProduct', function () {
                chkEditddlProducts();
            });

            $($(".txtDescription").find('.dvDescription').get().reverse()).each(function (i) {
                num++;
                $(this).find('hr').next().prepend(num + "- ");
            });

            $('.txtDescription').find('.dvDescription').first().addClass('BoldText');

            $('#Description').ckeditor({
                htmlEncodeOutput: true,
                filebrowserFlashGeneralUrl: null,
                enterMode: CKEDITOR.ENTER_BR,
                shiftEnterMode: CKEDITOR.ENTER_P
            });

            $(document.body).on('click', '.aDownloadFile', function (e) {
                e.preventDefault();
                var linkParam = $(this).attr('link');
                var fileName = $(this).html();
                var fileParams = JSON.stringify({ fileName: fileName, fileDBName: linkParam });
              
                if (fileName != "") {
                    $.ajax({
                        url: '/WebHelper/Download',
                        type: 'GET',
                        data: fileParams,
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                          
                            window.location = data;
                        }
                    });
                }
            });

            $('#btnSave').click(function () {
                loadFilesUploadedArray("$");
                $('.ddlProducts').removeAttr('disabled');
            });
        });

        function chkEditddlProducts() {
            if ($('#chkChangeProduct').is(":checked")) {
                $('.ddlProducts').attr("disabled", true);
            } else { $('.ddlProducts').removeAttr('disabled'); }
        }

        function loadFilesUploadedArray(separator) {
            if (uploadedFiles.length > 0) {
                var files = "";
                for (var i = 0; i < uploadedFiles.length; i++) {
                    if (i > 0) {
                        files = files + separator + uploadedFiles[i];
                    } else { files = uploadedFiles[i]; }
                }
                if ($('#UploadedFileName').val().length > 0) {
                    files = $('#UploadedFileName').val() + separator + files;
                }
                $('#UploadedFileName').val(files);
            }
        }

        function initAutoFileUpload() {
            'use strict';
            var lineBreak = "";
            $('#fu-my-auto-upload').fileupload({
                autoUpload: true,
                url: '/WebHelper/UploadFile',
                dataType: 'json',
                add: function (e, data) {
                    var jqXHR = data.submit()
                        .success(function (data, textStatus, jqXHR) {
                            if (data.isUploaded) {
                                uploadedFiles.push(data.filepath);
                                var fileLink = "<a href='#' target='_parent'>" + data.file + "</a>";
                                $('.dvUploadedFiles').prepend(fileLink + '<br>');
                                $('.dvUploadedFiles').find('div:first').remove();
                                $('.dvUploadedFiles').removeClass('hidden').slideDown();
                            }
                            else {
                                alert('File not uploaded successfully');
                            }
                        })
                        .error(function (data, textStatus, errorThrown) {
                            if (typeof (data) != 'undefined' || typeof (textStatus) != 'undefined' || typeof (errorThrown) != 'undefined') {
                                alert(textStatus + errorThrown + data);
                            }
                        });
                },
                fail: function (event, data) {
                    if (data.files[0].error) {
                        alert(data.files[0].error);
                    }
                }
            });
        }
    </script>
}
